ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"clock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.system_init,"ax",%progbits
  18              		.align	1
  19              		.global	system_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	system_init:
  26              	.LFB0:
  27              		.file 1 "Src/clock.c"
   1:Src/clock.c   **** #include "project.h"
   2:Src/clock.c   **** 
   3:Src/clock.c   **** 
   4:Src/clock.c   **** 
   5:Src/clock.c   **** // cau hinh max speed rcc
   6:Src/clock.c   **** void system_init(u32_t div_m, u32_t mul_n, u32_t div_p, u32_t system_source,u32_t div_ahb , u32_t d
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 12, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
   7:Src/clock.c   **** 	
   8:Src/clock.c   ****   volatile u32_t temp_reg;
   9:Src/clock.c   ****   volatile u32_t timeout;
  10:Src/clock.c   ****   
  11:Src/clock.c   ****   		//enable FPU
  12:Src/clock.c   **** 	temp_reg = read_reg(FPU_CPACR, ~0u);
  43              		.loc 1 12 0
  44 0004 544D     		ldr	r5, .L3
  45 0006 2C68     		ldr	r4, [r5]
  46 0008 0194     		str	r4, [sp, #4]
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 2


  13:Src/clock.c   **** 	temp_reg |= (0xF <<20);
  47              		.loc 1 13 0
  48 000a 019C     		ldr	r4, [sp, #4]
  49 000c 44F47004 		orr	r4, r4, #15728640
  50 0010 0194     		str	r4, [sp, #4]
  14:Src/clock.c   **** 	write_reg(FPU_CPACR , temp_reg) ; 
  51              		.loc 1 14 0
  52 0012 019C     		ldr	r4, [sp, #4]
  53 0014 2C60     		str	r4, [r5]
  54              	.LVL1:
  15:Src/clock.c   ****   
  16:Src/clock.c   ****  
  17:Src/clock.c   ****   /* Disable all interrupts */
  18:Src/clock.c   ****    write_reg(RCC_CIR, 0x00000000U);
  55              		.loc 1 18 0
  56 0016 514C     		ldr	r4, .L3+4
  57 0018 0025     		movs	r5, #0
  58 001a 2560     		str	r5, [r4]
  19:Src/clock.c   **** 
  20:Src/clock.c   **** 
  21:Src/clock.c   ****    // __HAL_RCC_SYSCFG_CLK_ENABLE();
  22:Src/clock.c   ****    write_reg(RCC_APB2ENR , (1u <<14 ));
  59              		.loc 1 22 0
  60 001c 3834     		adds	r4, r4, #56
  61 001e 4FF48045 		mov	r5, #16384
  62 0022 2560     		str	r5, [r4]
  23:Src/clock.c   ****    
  24:Src/clock.c   ****    //  __HAL_RCC_PWR_CLK_ENABLE();  	
  25:Src/clock.c   ****    write_reg(RCC_APB1ENR , (1u <<28 ));
  63              		.loc 1 25 0
  64 0024 043C     		subs	r4, r4, #4
  65 0026 4FF08055 		mov	r5, #268435456
  66 002a 2560     		str	r5, [r4]
  26:Src/clock.c   ****    
  27:Src/clock.c   ****    //__HAL_PWR_VOLTAGESCALING_ONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); for using clock <= 100mhz 
  28:Src/clock.c   ****    temp_reg = read_reg(PWR_CR , ~(3u << 14 ));
  67              		.loc 1 28 0
  68 002c 4C4D     		ldr	r5, .L3+8
  69 002e 2C68     		ldr	r4, [r5]
  70 0030 24F44044 		bic	r4, r4, #49152
  71 0034 0194     		str	r4, [sp, #4]
  29:Src/clock.c   ****    temp_reg |= (3u << 14);
  72              		.loc 1 29 0
  73 0036 019C     		ldr	r4, [sp, #4]
  74 0038 44F44044 		orr	r4, r4, #49152
  75 003c 0194     		str	r4, [sp, #4]
  30:Src/clock.c   ****    write_reg( PWR_CR , temp_reg);
  76              		.loc 1 30 0
  77 003e 019C     		ldr	r4, [sp, #4]
  78 0040 2C60     		str	r4, [r5]
  31:Src/clock.c   ****    
  32:Src/clock.c   ****    //HSE clock bypass
  33:Src/clock.c   ****    	temp_reg = read_reg(RCC_CR, ~(1u << 18 ));
  79              		.loc 1 33 0
  80 0042 484C     		ldr	r4, .L3+12
  81 0044 2568     		ldr	r5, [r4]
  82 0046 25F48025 		bic	r5, r5, #262144
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 3


  83 004a 0195     		str	r5, [sp, #4]
  34:Src/clock.c   **** 	temp_reg |= (0u << 18);
  84              		.loc 1 34 0
  85 004c 019D     		ldr	r5, [sp, #4]
  86 004e 0195     		str	r5, [sp, #4]
  35:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
  87              		.loc 1 35 0
  88 0050 019D     		ldr	r5, [sp, #4]
  89 0052 2560     		str	r5, [r4]
  36:Src/clock.c   ****     
  37:Src/clock.c   **** 	/* Disable the main PLL. */
  38:Src/clock.c   ****     temp_reg = read_reg(RCC_CR, ~(1 << 24));
  90              		.loc 1 38 0
  91 0054 25F08075 		bic	r5, r5, #16777216
  92 0058 0195     		str	r5, [sp, #4]
  39:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
  93              		.loc 1 39 0
  94 005a 019D     		ldr	r5, [sp, #4]
  95 005c 2560     		str	r5, [r4]
  40:Src/clock.c   **** 	
  41:Src/clock.c   **** 	/* Wait till PLL is disable */
  42:Src/clock.c   ****     timeout = 0xFFF;
  96              		.loc 1 42 0
  97 005e 40F6FF75 		movw	r5, #4095
  98 0062 0095     		str	r5, [sp]
  43:Src/clock.c   ****     do {
  44:Src/clock.c   ****         timeout--;
  99              		.loc 1 44 0
 100 0064 009D     		ldr	r5, [sp]
 101 0066 013D     		subs	r5, r5, #1
 102 0068 0095     		str	r5, [sp]
  45:Src/clock.c   ****     } while ((0 != read_reg(RCC_CR, (1 << 25))) && (timeout > 0));
  46:Src/clock.c   **** 	
  47:Src/clock.c   **** 	// can thiet lap ko se doc sai dia chi lenh , du lieu FLASH_LATENCY_2
  48:Src/clock.c   **** 	write_reg(FLASH_ACR , 0x03u);
 103              		.loc 1 48 0
 104 006a 3F4D     		ldr	r5, .L3+16
 105 006c 0326     		movs	r6, #3
 106 006e 2E60     		str	r6, [r5]
  49:Src/clock.c   **** 	
  50:Src/clock.c   **** 	
  51:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~0x3Fu);
 107              		.loc 1 51 0
 108 0070 A5F57F75 		sub	r5, r5, #1020
 109 0074 2E68     		ldr	r6, [r5]
 110 0076 26F03F06 		bic	r6, r6, #63
 111 007a 0196     		str	r6, [sp, #4]
  52:Src/clock.c   ****     temp_reg |= div_m;
 112              		.loc 1 52 0
 113 007c 019E     		ldr	r6, [sp, #4]
 114 007e 3043     		orrs	r0, r0, r6
 115              	.LVL2:
 116 0080 0190     		str	r0, [sp, #4]
  53:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 117              		.loc 1 53 0
 118 0082 0198     		ldr	r0, [sp, #4]
 119 0084 2860     		str	r0, [r5]
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 4


  54:Src/clock.c   ****     
  55:Src/clock.c   **** 	// nhan *N   *100
  56:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~(0x1FFu << 6));
 120              		.loc 1 56 0
 121 0086 20F4FF40 		bic	r0, r0, #32640
 122 008a 20F04000 		bic	r0, r0, #64
 123 008e 0190     		str	r0, [sp, #4]
  57:Src/clock.c   ****     temp_reg |= (mul_n << 6);
 124              		.loc 1 57 0
 125 0090 0198     		ldr	r0, [sp, #4]
 126 0092 40EA8111 		orr	r1, r0, r1, lsl #6
 127              	.LVL3:
 128 0096 0191     		str	r1, [sp, #4]
  58:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 129              		.loc 1 58 0
 130 0098 0199     		ldr	r1, [sp, #4]
 131 009a 2960     		str	r1, [r5]
  59:Src/clock.c   **** 	
  60:Src/clock.c   **** 	// chia /P  /2
  61:Src/clock.c   **** 
  62:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~(0x3u<< 16));
 132              		.loc 1 62 0
 133 009c 21F44031 		bic	r1, r1, #196608
 134 00a0 0191     		str	r1, [sp, #4]
  63:Src/clock.c   ****     temp_reg |= (div_p << 16);
 135              		.loc 1 63 0
 136 00a2 0199     		ldr	r1, [sp, #4]
 137 00a4 41EA0242 		orr	r2, r1, r2, lsl #16
 138              	.LVL4:
 139 00a8 0192     		str	r2, [sp, #4]
  64:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 140              		.loc 1 64 0
 141 00aa 019A     		ldr	r2, [sp, #4]
 142 00ac 2A60     		str	r2, [r5]
  65:Src/clock.c   **** 	
  66:Src/clock.c   **** 	
  67:Src/clock.c   **** 	/* Enable the main PLL. */
  68:Src/clock.c   ****     temp_reg = read_reg(RCC_CR, ~(1 << 24));
 143              		.loc 1 68 0
 144 00ae 2268     		ldr	r2, [r4]
 145 00b0 22F08072 		bic	r2, r2, #16777216
 146 00b4 0192     		str	r2, [sp, #4]
  69:Src/clock.c   ****     temp_reg |= (1 << 24);
 147              		.loc 1 69 0
 148 00b6 019A     		ldr	r2, [sp, #4]
 149 00b8 42F08072 		orr	r2, r2, #16777216
 150 00bc 0192     		str	r2, [sp, #4]
  70:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
 151              		.loc 1 70 0
 152 00be 019A     		ldr	r2, [sp, #4]
 153 00c0 2260     		str	r2, [r4]
  71:Src/clock.c   **** 	
  72:Src/clock.c   **** 	/* Wait till PLL is ready */
  73:Src/clock.c   ****     timeout = 0xFFFF;
 154              		.loc 1 73 0
 155 00c2 4FF6FF72 		movw	r2, #65535
 156 00c6 0092     		str	r2, [sp]
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 5


  74:Src/clock.c   ****     do {
  75:Src/clock.c   ****         timeout--;
 157              		.loc 1 75 0
 158 00c8 009A     		ldr	r2, [sp]
 159 00ca 013A     		subs	r2, r2, #1
 160 00cc 0092     		str	r2, [sp]
  76:Src/clock.c   ****     } while ((0 == read_reg(RCC_CR, (1 << 25))) && (timeout > 0));
  77:Src/clock.c   **** 	
  78:Src/clock.c   **** 
  79:Src/clock.c   **** 	//  chia 1 
  80:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0xFu << 4));
 161              		.loc 1 80 0
 162 00ce 274A     		ldr	r2, .L3+20
 163 00d0 1168     		ldr	r1, [r2]
 164 00d2 21F0F001 		bic	r1, r1, #240
 165 00d6 0191     		str	r1, [sp, #4]
  81:Src/clock.c   **** 	temp_reg |= ( div_ahb << 4);
 166              		.loc 1 81 0
 167 00d8 0199     		ldr	r1, [sp, #4]
 168 00da 0698     		ldr	r0, [sp, #24]
 169 00dc 41EA0011 		orr	r1, r1, r0, lsl #4
 170 00e0 0191     		str	r1, [sp, #4]
  82:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);	
 171              		.loc 1 82 0
 172 00e2 0199     		ldr	r1, [sp, #4]
 173 00e4 1160     		str	r1, [r2]
  83:Src/clock.c   **** 	
  84:Src/clock.c   **** 	 /* APB1 prescaler */
  85:Src/clock.c   **** 	// chia toi da
  86:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0x07u << 10));
 174              		.loc 1 86 0
 175 00e6 21F4E051 		bic	r1, r1, #7168
 176 00ea 0191     		str	r1, [sp, #4]
  87:Src/clock.c   **** 	temp_reg |= (APB_DIV16 << 10);
 177              		.loc 1 87 0
 178 00ec 0199     		ldr	r1, [sp, #4]
 179 00ee 41F4E051 		orr	r1, r1, #7168
 180 00f2 0191     		str	r1, [sp, #4]
  88:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 181              		.loc 1 88 0
 182 00f4 0199     		ldr	r1, [sp, #4]
 183 00f6 1160     		str	r1, [r2]
  89:Src/clock.c   **** 	// APB2 giong APB1
  90:Src/clock.c   **** 	temp_reg = read_reg(RCC_CFGR, ~(0x07u << 13));
 184              		.loc 1 90 0
 185 00f8 21F46041 		bic	r1, r1, #57344
 186 00fc 0191     		str	r1, [sp, #4]
  91:Src/clock.c   **** 	temp_reg |= (APB_DIV16 << 13);
 187              		.loc 1 91 0
 188 00fe 0199     		ldr	r1, [sp, #4]
 189 0100 41F46041 		orr	r1, r1, #57344
 190 0104 0191     		str	r1, [sp, #4]
  92:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 191              		.loc 1 92 0
 192 0106 0199     		ldr	r1, [sp, #4]
 193 0108 1160     		str	r1, [r2]
  93:Src/clock.c   **** 	
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 6


  94:Src/clock.c   **** 
  95:Src/clock.c   **** 	//select source
  96:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0x3u << 0));
 194              		.loc 1 96 0
 195 010a 21F00301 		bic	r1, r1, #3
 196 010e 0191     		str	r1, [sp, #4]
  97:Src/clock.c   ****     temp_reg |= (system_source << 0);
 197              		.loc 1 97 0
 198 0110 0199     		ldr	r1, [sp, #4]
 199 0112 0B43     		orrs	r3, r3, r1
 200              	.LVL5:
 201 0114 0193     		str	r3, [sp, #4]
  98:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 202              		.loc 1 98 0
 203 0116 019B     		ldr	r3, [sp, #4]
 204 0118 1360     		str	r3, [r2]
  99:Src/clock.c   ****     
 100:Src/clock.c   ****     // /* Wait till System clock switch is ready */
 101:Src/clock.c   ****     timeout = 0xFFFFFF;
 205              		.loc 1 101 0
 206 011a 6FF07F43 		mvn	r3, #-16777216
 207 011e 0093     		str	r3, [sp]
 102:Src/clock.c   ****     do {
 103:Src/clock.c   ****         timeout--;
 208              		.loc 1 103 0
 209 0120 009B     		ldr	r3, [sp]
 210 0122 013B     		subs	r3, r3, #1
 211 0124 0093     		str	r3, [sp]
 104:Src/clock.c   ****     } while (((system_source << 2) != read_reg(RCC_CFGR, (0x3 << 2))) && (timeout > 0));
 105:Src/clock.c   **** 	
 106:Src/clock.c   **** 	
 107:Src/clock.c   ****     /* APB1 prescaler */
 108:Src/clock.c   **** 	//  apb1 chia 2
 109:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(7u << 10));
 212              		.loc 1 109 0
 213 0126 1368     		ldr	r3, [r2]
 214 0128 23F4E053 		bic	r3, r3, #7168
 215 012c 0193     		str	r3, [sp, #4]
 110:Src/clock.c   **** 	temp_reg |=  (div_apb1 << 10);
 216              		.loc 1 110 0
 217 012e 019B     		ldr	r3, [sp, #4]
 218 0130 0799     		ldr	r1, [sp, #28]
 219 0132 43EA8123 		orr	r3, r3, r1, lsl #10
 220 0136 0193     		str	r3, [sp, #4]
 111:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 221              		.loc 1 111 0
 222 0138 019B     		ldr	r3, [sp, #4]
 223 013a 1360     		str	r3, [r2]
 112:Src/clock.c   **** 	
 113:Src/clock.c   **** 	
 114:Src/clock.c   **** 	// apb2 chia 1
 115:Src/clock.c   **** 	temp_reg = read_reg(RCC_CFGR, ~(7u << 13));
 224              		.loc 1 115 0
 225 013c 23F46043 		bic	r3, r3, #57344
 226 0140 0193     		str	r3, [sp, #4]
 116:Src/clock.c   **** 	temp_reg |=  (div_apb2 << 10);
 227              		.loc 1 116 0
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 7


 228 0142 019B     		ldr	r3, [sp, #4]
 229 0144 0899     		ldr	r1, [sp, #32]
 230 0146 43EA8123 		orr	r3, r3, r1, lsl #10
 231 014a 0193     		str	r3, [sp, #4]
 117:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 232              		.loc 1 117 0
 233 014c 019B     		ldr	r3, [sp, #4]
 234 014e 1360     		str	r3, [r2]
 118:Src/clock.c   **** 	
 119:Src/clock.c   **** 
 120:Src/clock.c   **** }
 235              		.loc 1 120 0
 236 0150 03B0     		add	sp, sp, #12
 237              	.LCFI2:
 238              		.cfi_def_cfa_offset 12
 239              		@ sp needed
 240 0152 70BC     		pop	{r4, r5, r6}
 241              	.LCFI3:
 242              		.cfi_restore 6
 243              		.cfi_restore 5
 244              		.cfi_restore 4
 245              		.cfi_def_cfa_offset 0
 246 0154 7047     		bx	lr
 247              	.L4:
 248 0156 00BF     		.align	2
 249              	.L3:
 250 0158 88ED00E0 		.word	-536810104
 251 015c 0C380240 		.word	1073887244
 252 0160 00700040 		.word	1073770496
 253 0164 00380240 		.word	1073887232
 254 0168 003C0240 		.word	1073888256
 255 016c 08380240 		.word	1073887240
 256              		.cfi_endproc
 257              	.LFE0:
 259              		.section	.text.rcc_enableclk,"ax",%progbits
 260              		.align	1
 261              		.global	rcc_enableclk
 262              		.syntax unified
 263              		.thumb
 264              		.thumb_func
 265              		.fpu fpv4-sp-d16
 267              	rcc_enableclk:
 268              	.LFB1:
 121:Src/clock.c   **** void rcc_enableclk(){
 269              		.loc 1 121 0
 270              		.cfi_startproc
 271              		@ args = 0, pretend = 0, frame = 0
 272              		@ frame_needed = 0, uses_anonymous_args = 0
 273              		@ link register save eliminated.
 122:Src/clock.c   **** 	u32_t temp_reg;
 123:Src/clock.c   **** 	
 124:Src/clock.c   **** 	// enable port h
 125:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<7));
 274              		.loc 1 125 0
 275 0000 024A     		ldr	r2, .L6
 276 0002 1368     		ldr	r3, [r2]
 277              	.LVL6:
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 8


 126:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 7 );
 127:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );	
 128:Src/clock.c   **** 
 129:Src/clock.c   **** 	//port d 
 130:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<3));
 131:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 3 );
 132:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );
 133:Src/clock.c   **** 	
 134:Src/clock.c   **** 	//port b
 135:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<1));
 136:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 1 );
 278              		.loc 1 136 0
 279 0004 43F08A03 		orr	r3, r3, #138
 280              	.LVL7:
 137:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );
 281              		.loc 1 137 0
 282 0008 1360     		str	r3, [r2]
 138:Src/clock.c   ****   
 139:Src/clock.c   **** }...
 283              		.loc 1 139 0
 284 000a 7047     		bx	lr
 285              	.L7:
 286              		.align	2
 287              	.L6:
 288 000c 30380240 		.word	1073887280
 289              		.cfi_endproc
 290              	.LFE1:
 292              		.text
 293              	.Letext0:
 294              		.file 2 "Inc/main.h"
 295              		.file 3 "Inc/stm32f4xx_it.h"
ARM GAS  E:\msys32\tmp\cc2IelJC.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
E:\msys32\tmp\cc2IelJC.s:18     .text.system_init:00000000 $t
E:\msys32\tmp\cc2IelJC.s:25     .text.system_init:00000000 system_init
E:\msys32\tmp\cc2IelJC.s:250    .text.system_init:00000158 $d
E:\msys32\tmp\cc2IelJC.s:260    .text.rcc_enableclk:00000000 $t
E:\msys32\tmp\cc2IelJC.s:267    .text.rcc_enableclk:00000000 rcc_enableclk
E:\msys32\tmp\cc2IelJC.s:288    .text.rcc_enableclk:0000000c $d

NO UNDEFINED SYMBOLS
