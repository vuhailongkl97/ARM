ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"clock.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.system_init,"ax",%progbits
  18              		.align	1
  19              		.global	system_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	system_init:
  26              	.LFB0:
  27              		.file 1 "Src/clock.c"
   1:Src/clock.c   **** #include "project.h"
   2:Src/clock.c   **** 
   3:Src/clock.c   **** 
   4:Src/clock.c   **** 
   5:Src/clock.c   **** // cau hinh max speed rcc
   6:Src/clock.c   **** void system_init(u32_t div_m, u32_t mul_n, u32_t div_p, u32_t system_source,u32_t div_ahb , u32_t d
  28              		.loc 1 6 0
  29              		.cfi_startproc
  30              		@ args = 12, pretend = 0, frame = 8
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 24
   7:Src/clock.c   **** 	
   8:Src/clock.c   ****   volatile unsigned int temp_reg;
   9:Src/clock.c   ****   volatile unsigned int timeout;
  10:Src/clock.c   ****   
  11:Src/clock.c   ****  
  12:Src/clock.c   ****   /* Disable all interrupts */
  13:Src/clock.c   ****    write_reg(RCC_CIR, 0x00000000U);
  43              		.loc 1 13 0
  44 0004 4F4C     		ldr	r4, .L3
  45 0006 0025     		movs	r5, #0
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 2


  46 0008 2560     		str	r5, [r4]
  47              	.LVL1:
  14:Src/clock.c   **** 
  15:Src/clock.c   **** 
  16:Src/clock.c   ****    // __HAL_RCC_SYSCFG_CLK_ENABLE();
  17:Src/clock.c   ****    write_reg(RCC_APB2ENR , (1u <<14 ));
  48              		.loc 1 17 0
  49 000a 3834     		adds	r4, r4, #56
  50 000c 4FF48045 		mov	r5, #16384
  51 0010 2560     		str	r5, [r4]
  18:Src/clock.c   ****    
  19:Src/clock.c   ****    //  __HAL_RCC_PWR_CLK_ENABLE();  	
  20:Src/clock.c   ****    write_reg(RCC_APB1ENR , (1u <<28 ));
  52              		.loc 1 20 0
  53 0012 043C     		subs	r4, r4, #4
  54 0014 4FF08055 		mov	r5, #268435456
  55 0018 2560     		str	r5, [r4]
  21:Src/clock.c   ****    
  22:Src/clock.c   ****    //__HAL_PWR_VOLTAGESCALING_ONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); for using clock <= 100mhz 
  23:Src/clock.c   ****    temp_reg = read_reg(PWR_CR , ~(3u << 14 ));
  56              		.loc 1 23 0
  57 001a 4B4D     		ldr	r5, .L3+4
  58 001c 2C68     		ldr	r4, [r5]
  59 001e 24F44044 		bic	r4, r4, #49152
  60 0022 0194     		str	r4, [sp, #4]
  24:Src/clock.c   ****    temp_reg |= (3u << 14);
  61              		.loc 1 24 0
  62 0024 019C     		ldr	r4, [sp, #4]
  63 0026 44F44044 		orr	r4, r4, #49152
  64 002a 0194     		str	r4, [sp, #4]
  25:Src/clock.c   ****    write_reg( PWR_CR , temp_reg);
  65              		.loc 1 25 0
  66 002c 019C     		ldr	r4, [sp, #4]
  67 002e 2C60     		str	r4, [r5]
  26:Src/clock.c   ****    
  27:Src/clock.c   ****    //HSE clock bypass
  28:Src/clock.c   ****    	temp_reg = read_reg(RCC_CR, ~(1u << 18 ));
  68              		.loc 1 28 0
  69 0030 464C     		ldr	r4, .L3+8
  70 0032 2568     		ldr	r5, [r4]
  71 0034 25F48025 		bic	r5, r5, #262144
  72 0038 0195     		str	r5, [sp, #4]
  29:Src/clock.c   **** 	temp_reg |= (0u << 18);
  73              		.loc 1 29 0
  74 003a 019D     		ldr	r5, [sp, #4]
  75 003c 0195     		str	r5, [sp, #4]
  30:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
  76              		.loc 1 30 0
  77 003e 019D     		ldr	r5, [sp, #4]
  78 0040 2560     		str	r5, [r4]
  31:Src/clock.c   ****     
  32:Src/clock.c   **** 	/* Disable the main PLL. */
  33:Src/clock.c   ****     temp_reg = read_reg(RCC_CR, ~(1 << 24));
  79              		.loc 1 33 0
  80 0042 25F08075 		bic	r5, r5, #16777216
  81 0046 0195     		str	r5, [sp, #4]
  34:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 3


  82              		.loc 1 34 0
  83 0048 019D     		ldr	r5, [sp, #4]
  84 004a 2560     		str	r5, [r4]
  35:Src/clock.c   **** 	
  36:Src/clock.c   **** 	/* Wait till PLL is disable */
  37:Src/clock.c   ****     timeout = 0xFFF;
  85              		.loc 1 37 0
  86 004c 40F6FF75 		movw	r5, #4095
  87 0050 0095     		str	r5, [sp]
  38:Src/clock.c   ****     do {
  39:Src/clock.c   ****         timeout--;
  88              		.loc 1 39 0
  89 0052 009D     		ldr	r5, [sp]
  90 0054 013D     		subs	r5, r5, #1
  91 0056 0095     		str	r5, [sp]
  40:Src/clock.c   ****     } while ((0 != read_reg(RCC_CR, (1 << 25))) && (timeout > 0));
  41:Src/clock.c   **** 	
  42:Src/clock.c   **** 	// can thiet lap ko se doc sai dia chi lenh , du lieu FLASH_LATENCY_2
  43:Src/clock.c   **** 	write_reg(FLASH_ACR , 0x03u);
  92              		.loc 1 43 0
  93 0058 3D4D     		ldr	r5, .L3+12
  94 005a 0326     		movs	r6, #3
  95 005c 2E60     		str	r6, [r5]
  44:Src/clock.c   **** 	
  45:Src/clock.c   **** 	
  46:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~0x3Fu);
  96              		.loc 1 46 0
  97 005e A5F57F75 		sub	r5, r5, #1020
  98 0062 2E68     		ldr	r6, [r5]
  99 0064 26F03F06 		bic	r6, r6, #63
 100 0068 0196     		str	r6, [sp, #4]
  47:Src/clock.c   ****     temp_reg |= div_m;
 101              		.loc 1 47 0
 102 006a 019E     		ldr	r6, [sp, #4]
 103 006c 3043     		orrs	r0, r0, r6
 104              	.LVL2:
 105 006e 0190     		str	r0, [sp, #4]
  48:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 106              		.loc 1 48 0
 107 0070 0198     		ldr	r0, [sp, #4]
 108 0072 2860     		str	r0, [r5]
  49:Src/clock.c   ****     
  50:Src/clock.c   **** 	// nhan *N   *100
  51:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~(0x1FFu << 6));
 109              		.loc 1 51 0
 110 0074 20F4FF40 		bic	r0, r0, #32640
 111 0078 20F04000 		bic	r0, r0, #64
 112 007c 0190     		str	r0, [sp, #4]
  52:Src/clock.c   ****     temp_reg |= (mul_n << 6);
 113              		.loc 1 52 0
 114 007e 0198     		ldr	r0, [sp, #4]
 115 0080 40EA8111 		orr	r1, r0, r1, lsl #6
 116              	.LVL3:
 117 0084 0191     		str	r1, [sp, #4]
  53:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 118              		.loc 1 53 0
 119 0086 0199     		ldr	r1, [sp, #4]
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 4


 120 0088 2960     		str	r1, [r5]
  54:Src/clock.c   **** 	
  55:Src/clock.c   **** 	// chia /P  /2
  56:Src/clock.c   **** 
  57:Src/clock.c   ****     temp_reg = read_reg(RCC_PLLCFGR, ~(0x3u<< 16));
 121              		.loc 1 57 0
 122 008a 21F44031 		bic	r1, r1, #196608
 123 008e 0191     		str	r1, [sp, #4]
  58:Src/clock.c   ****     temp_reg |= (div_p << 16);
 124              		.loc 1 58 0
 125 0090 0199     		ldr	r1, [sp, #4]
 126 0092 41EA0242 		orr	r2, r1, r2, lsl #16
 127              	.LVL4:
 128 0096 0192     		str	r2, [sp, #4]
  59:Src/clock.c   ****     write_reg(RCC_PLLCFGR, temp_reg);
 129              		.loc 1 59 0
 130 0098 019A     		ldr	r2, [sp, #4]
 131 009a 2A60     		str	r2, [r5]
  60:Src/clock.c   **** 	
  61:Src/clock.c   **** 	
  62:Src/clock.c   **** 	/* Enable the main PLL. */
  63:Src/clock.c   ****     temp_reg = read_reg(RCC_CR, ~(1 << 24));
 132              		.loc 1 63 0
 133 009c 2268     		ldr	r2, [r4]
 134 009e 22F08072 		bic	r2, r2, #16777216
 135 00a2 0192     		str	r2, [sp, #4]
  64:Src/clock.c   ****     temp_reg |= (1 << 24);
 136              		.loc 1 64 0
 137 00a4 019A     		ldr	r2, [sp, #4]
 138 00a6 42F08072 		orr	r2, r2, #16777216
 139 00aa 0192     		str	r2, [sp, #4]
  65:Src/clock.c   ****     write_reg(RCC_CR, temp_reg);
 140              		.loc 1 65 0
 141 00ac 019A     		ldr	r2, [sp, #4]
 142 00ae 2260     		str	r2, [r4]
  66:Src/clock.c   **** 	
  67:Src/clock.c   **** 	/* Wait till PLL is ready */
  68:Src/clock.c   ****     timeout = 0xFFFF;
 143              		.loc 1 68 0
 144 00b0 4FF6FF72 		movw	r2, #65535
 145 00b4 0092     		str	r2, [sp]
  69:Src/clock.c   ****     do {
  70:Src/clock.c   ****         timeout--;
 146              		.loc 1 70 0
 147 00b6 009A     		ldr	r2, [sp]
 148 00b8 013A     		subs	r2, r2, #1
 149 00ba 0092     		str	r2, [sp]
  71:Src/clock.c   ****     } while ((0 == read_reg(RCC_CR, (1 << 25))) && (timeout > 0));
  72:Src/clock.c   **** 	
  73:Src/clock.c   **** 
  74:Src/clock.c   **** 	//  chia 1 
  75:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0xFu << 4));
 150              		.loc 1 75 0
 151 00bc 254A     		ldr	r2, .L3+16
 152 00be 1168     		ldr	r1, [r2]
 153 00c0 21F0F001 		bic	r1, r1, #240
 154 00c4 0191     		str	r1, [sp, #4]
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 5


  76:Src/clock.c   **** 	temp_reg |= ( div_ahb << 4);
 155              		.loc 1 76 0
 156 00c6 0199     		ldr	r1, [sp, #4]
 157 00c8 0698     		ldr	r0, [sp, #24]
 158 00ca 41EA0011 		orr	r1, r1, r0, lsl #4
 159 00ce 0191     		str	r1, [sp, #4]
  77:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);	
 160              		.loc 1 77 0
 161 00d0 0199     		ldr	r1, [sp, #4]
 162 00d2 1160     		str	r1, [r2]
  78:Src/clock.c   **** 	
  79:Src/clock.c   **** 	 /* APB1 prescaler */
  80:Src/clock.c   **** 	// chia toi da
  81:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0x07u << 10));
 163              		.loc 1 81 0
 164 00d4 21F4E051 		bic	r1, r1, #7168
 165 00d8 0191     		str	r1, [sp, #4]
  82:Src/clock.c   **** 	temp_reg |= (APB_DIV16 << 10);
 166              		.loc 1 82 0
 167 00da 0199     		ldr	r1, [sp, #4]
 168 00dc 41F4E051 		orr	r1, r1, #7168
 169 00e0 0191     		str	r1, [sp, #4]
  83:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 170              		.loc 1 83 0
 171 00e2 0199     		ldr	r1, [sp, #4]
 172 00e4 1160     		str	r1, [r2]
  84:Src/clock.c   **** 	// APB2 giong APB1
  85:Src/clock.c   **** 	temp_reg = read_reg(RCC_CFGR, ~(0x07u << 13));
 173              		.loc 1 85 0
 174 00e6 21F46041 		bic	r1, r1, #57344
 175 00ea 0191     		str	r1, [sp, #4]
  86:Src/clock.c   **** 	temp_reg |= (APB_DIV16 << 13);
 176              		.loc 1 86 0
 177 00ec 0199     		ldr	r1, [sp, #4]
 178 00ee 41F46041 		orr	r1, r1, #57344
 179 00f2 0191     		str	r1, [sp, #4]
  87:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 180              		.loc 1 87 0
 181 00f4 0199     		ldr	r1, [sp, #4]
 182 00f6 1160     		str	r1, [r2]
  88:Src/clock.c   **** 	
  89:Src/clock.c   **** 
  90:Src/clock.c   **** 	//select source
  91:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(0x3u << 0));
 183              		.loc 1 91 0
 184 00f8 21F00301 		bic	r1, r1, #3
 185 00fc 0191     		str	r1, [sp, #4]
  92:Src/clock.c   ****     temp_reg |= (system_source << 0);
 186              		.loc 1 92 0
 187 00fe 0199     		ldr	r1, [sp, #4]
 188 0100 0B43     		orrs	r3, r3, r1
 189              	.LVL5:
 190 0102 0193     		str	r3, [sp, #4]
  93:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 191              		.loc 1 93 0
 192 0104 019B     		ldr	r3, [sp, #4]
 193 0106 1360     		str	r3, [r2]
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 6


  94:Src/clock.c   ****     
  95:Src/clock.c   ****     // /* Wait till System clock switch is ready */
  96:Src/clock.c   ****     timeout = 0xFFFFFF;
 194              		.loc 1 96 0
 195 0108 6FF07F43 		mvn	r3, #-16777216
 196 010c 0093     		str	r3, [sp]
  97:Src/clock.c   ****     do {
  98:Src/clock.c   ****         timeout--;
 197              		.loc 1 98 0
 198 010e 009B     		ldr	r3, [sp]
 199 0110 013B     		subs	r3, r3, #1
 200 0112 0093     		str	r3, [sp]
  99:Src/clock.c   ****     } while (((system_source << 2) != read_reg(RCC_CFGR, (0x3 << 2))) && (timeout > 0));
 100:Src/clock.c   **** 	
 101:Src/clock.c   **** 	
 102:Src/clock.c   ****     /* APB1 prescaler */
 103:Src/clock.c   **** 	//  apb1 chia 2
 104:Src/clock.c   ****     temp_reg = read_reg(RCC_CFGR, ~(7u << 10));
 201              		.loc 1 104 0
 202 0114 1368     		ldr	r3, [r2]
 203 0116 23F4E053 		bic	r3, r3, #7168
 204 011a 0193     		str	r3, [sp, #4]
 105:Src/clock.c   **** 	temp_reg |=  (div_apb1 << 10);
 205              		.loc 1 105 0
 206 011c 019B     		ldr	r3, [sp, #4]
 207 011e 0799     		ldr	r1, [sp, #28]
 208 0120 43EA8123 		orr	r3, r3, r1, lsl #10
 209 0124 0193     		str	r3, [sp, #4]
 106:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 210              		.loc 1 106 0
 211 0126 019B     		ldr	r3, [sp, #4]
 212 0128 1360     		str	r3, [r2]
 107:Src/clock.c   **** 	
 108:Src/clock.c   **** 	
 109:Src/clock.c   **** 	// apb2 chia 1
 110:Src/clock.c   **** 	temp_reg = read_reg(RCC_CFGR, ~(7u << 13));
 213              		.loc 1 110 0
 214 012a 23F46043 		bic	r3, r3, #57344
 215 012e 0193     		str	r3, [sp, #4]
 111:Src/clock.c   **** 	temp_reg |=  (div_apb2 << 10);
 216              		.loc 1 111 0
 217 0130 019B     		ldr	r3, [sp, #4]
 218 0132 0899     		ldr	r1, [sp, #32]
 219 0134 43EA8123 		orr	r3, r3, r1, lsl #10
 220 0138 0193     		str	r3, [sp, #4]
 112:Src/clock.c   ****     write_reg(RCC_CFGR, temp_reg);
 221              		.loc 1 112 0
 222 013a 019B     		ldr	r3, [sp, #4]
 223 013c 1360     		str	r3, [r2]
 113:Src/clock.c   **** 	
 114:Src/clock.c   **** 
 115:Src/clock.c   **** }
 224              		.loc 1 115 0
 225 013e 03B0     		add	sp, sp, #12
 226              	.LCFI2:
 227              		.cfi_def_cfa_offset 12
 228              		@ sp needed
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 7


 229 0140 70BC     		pop	{r4, r5, r6}
 230              	.LCFI3:
 231              		.cfi_restore 6
 232              		.cfi_restore 5
 233              		.cfi_restore 4
 234              		.cfi_def_cfa_offset 0
 235 0142 7047     		bx	lr
 236              	.L4:
 237              		.align	2
 238              	.L3:
 239 0144 0C380240 		.word	1073887244
 240 0148 00700040 		.word	1073770496
 241 014c 00380240 		.word	1073887232
 242 0150 003C0240 		.word	1073888256
 243 0154 08380240 		.word	1073887240
 244              		.cfi_endproc
 245              	.LFE0:
 247              		.section	.text.rcc_enableclk,"ax",%progbits
 248              		.align	1
 249              		.global	rcc_enableclk
 250              		.syntax unified
 251              		.thumb
 252              		.thumb_func
 253              		.fpu fpv4-sp-d16
 255              	rcc_enableclk:
 256              	.LFB1:
 116:Src/clock.c   **** void rcc_enableclk(){
 257              		.loc 1 116 0
 258              		.cfi_startproc
 259              		@ args = 0, pretend = 0, frame = 0
 260              		@ frame_needed = 0, uses_anonymous_args = 0
 261              		@ link register save eliminated.
 117:Src/clock.c   **** 	unsigned int temp_reg;
 118:Src/clock.c   **** 	
 119:Src/clock.c   **** 	// enable port h
 120:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<7));
 262              		.loc 1 120 0
 263 0000 024A     		ldr	r2, .L6
 264 0002 1368     		ldr	r3, [r2]
 265              	.LVL6:
 121:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 7 );
 122:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );	
 123:Src/clock.c   **** 
 124:Src/clock.c   **** 	//port d 
 125:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<3));
 126:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 3 );
 127:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );
 128:Src/clock.c   **** 	
 129:Src/clock.c   **** 	//port b
 130:Src/clock.c   **** 	temp_reg = read_reg(RCC_AHB1ENR , ~(1 <<1));
 131:Src/clock.c   **** 	temp_reg  = temp_reg | (1 << 1 );
 266              		.loc 1 131 0
 267 0004 43F08A03 		orr	r3, r3, #138
 268              	.LVL7:
 132:Src/clock.c   **** 	write_reg(RCC_AHB1ENR , temp_reg );
 269              		.loc 1 132 0
 270 0008 1360     		str	r3, [r2]
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 8


 133:Src/clock.c   ****   
 134:Src/clock.c   **** }...
 271              		.loc 1 134 0
 272 000a 7047     		bx	lr
 273              	.L7:
 274              		.align	2
 275              	.L6:
 276 000c 30380240 		.word	1073887280
 277              		.cfi_endproc
 278              	.LFE1:
 280              		.text
 281              	.Letext0:
 282              		.file 2 "Inc/main.h"
 283              		.file 3 "Inc/stm32f4xx_it.h"
ARM GAS  E:\msys32\tmp\ccMZf4lg.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 clock.c
E:\msys32\tmp\ccMZf4lg.s:18     .text.system_init:00000000 $t
E:\msys32\tmp\ccMZf4lg.s:25     .text.system_init:00000000 system_init
E:\msys32\tmp\ccMZf4lg.s:239    .text.system_init:00000144 $d
E:\msys32\tmp\ccMZf4lg.s:248    .text.rcc_enableclk:00000000 $t
E:\msys32\tmp\ccMZf4lg.s:255    .text.rcc_enableclk:00000000 rcc_enableclk
E:\msys32\tmp\ccMZf4lg.s:276    .text.rcc_enableclk:0000000c $d

NO UNDEFINED SYMBOLS
