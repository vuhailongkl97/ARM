ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"test.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.config_ext_clk1,"ax",%progbits
  18              		.align	1
  19              		.global	config_ext_clk1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	config_ext_clk1:
  26              	.LFB0:
  27              		.file 1 "Src/test.c"
   1:Src/test.c    **** #include "project.h"
   2:Src/test.c    **** 
   3:Src/test.c    **** // 1. Configure the timers to use the TIx pin as input:
   4:Src/test.c    **** // a) Select the pin to be used by writing CCxS bits in the TIMx_CCMR1 register.
   5:Src/test.c    **** // b) Select the polarity of the input:
   6:Src/test.c    **** // For the STM32F100/101/102/103/105/107 lines: by writing CCxP in the
   7:Src/test.c    **** // mTIM_CCER register to select the rising or the falling edge;
   8:Src/test.c    **** // For the other series & lines: by writing CCxP and CCxNP in the mTIM_CCER
   9:Src/test.c    **** // register to select the rising/falling edge, or both edges (a) .
  10:Src/test.c    **** // c) Enable corresponding channel by setting the CCEx bit in the mTIM_CCER register.
  11:Src/test.c    **** // 2. Select the timer TIx as the trigger input source by writing TS bits in the TIMx_SMCR
  12:Src/test.c    **** // register.
  13:Src/test.c    **** // 3. Select the external clock mode1 by writing SMS=111 in the TIMx_SMCR register.
  14:Src/test.c    **** void config_ext_clk1(){
  28              		.loc 1 14 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  15:Src/test.c    **** 	u32_t temp_reg;
  16:Src/test.c    **** 	// 1.Configure channel 2 to detect rising edges on the TI2 input
  17:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR1(mTIM2) , ~3u);
  33              		.loc 1 17 0
  34 0000 0F4A     		ldr	r2, .L2
  35 0002 1368     		ldr	r3, [r2]
  36 0004 23F00303 		bic	r3, r3, #3
  37              	.LVL0:
  18:Src/test.c    **** 	temp_reg |= 1u;
  38              		.loc 1 18 0
  39 0008 43F00103 		orr	r3, r3, #1
  40              	.LVL1:
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 2


  19:Src/test.c    **** 	write_reg(mTIM_CCMR1(mTIM2) , temp_reg);
  20:Src/test.c    **** 	
  21:Src/test.c    **** 	//2.Configure the input filter duration by writing the IC1F[3:0] bits in the TIMx_CCMR1
  22:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR1(mTIM2) , ~(0xFU << 4));
  41              		.loc 1 22 0
  42 000c 23F0F003 		bic	r3, r3, #240
  43              	.LVL2:
  23:Src/test.c    **** 	temp_reg |= (3u<<4);
  44              		.loc 1 23 0
  45 0010 43F03003 		orr	r3, r3, #48
  46              	.LVL3:
  24:Src/test.c    **** 	write_reg(mTIM_CCMR1(mTIM2) , temp_reg);
  47              		.loc 1 24 0
  48 0014 1360     		str	r3, [r2]
  25:Src/test.c    **** 	
  26:Src/test.c    **** 	
  27:Src/test.c    **** 	//3. Select rising edge polarity by writing CC1P=0 and CC1NP=0 in the mTIM_CCER
  28:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM2) , ~0xFU);
  49              		.loc 1 28 0
  50 0016 0832     		adds	r2, r2, #8
  51 0018 1368     		ldr	r3, [r2]
  52              	.LVL4:
  53 001a 23F00F03 		bic	r3, r3, #15
  54              	.LVL5:
  29:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM2) , temp_reg);
  55              		.loc 1 29 0
  56 001e 1360     		str	r3, [r2]
  30:Src/test.c    **** 
  31:Src/test.c    **** 	// 4. Select the external clock mode1 by writing SMS=111 in the TIMx_SMCR register.
  32:Src/test.c    **** 	temp_reg = read_reg(mTIM_SMCR(mTIM2) , ~(7u << 0));
  57              		.loc 1 32 0
  58 0020 183A     		subs	r2, r2, #24
  59 0022 1368     		ldr	r3, [r2]
  60              	.LVL6:
  33:Src/test.c    **** 	temp_reg |= 7U;
  61              		.loc 1 33 0
  62 0024 43F00703 		orr	r3, r3, #7
  63              	.LVL7:
  34:Src/test.c    **** 	write_reg(mTIM_SMCR(mTIM2) , temp_reg);
  35:Src/test.c    **** 	
  36:Src/test.c    **** 	// 5.Select TI1 as the input source by writing TS=101 in the TIMx_SMCR register
  37:Src/test.c    **** 	temp_reg = read_reg(mTIM_SMCR(mTIM2) , ~(7u << 4));
  64              		.loc 1 37 0
  65 0028 23F07003 		bic	r3, r3, #112
  66              	.LVL8:
  38:Src/test.c    **** 	temp_reg |= (5U <<4);
  67              		.loc 1 38 0
  68 002c 43F05003 		orr	r3, r3, #80
  69              	.LVL9:
  39:Src/test.c    **** 	write_reg(mTIM_SMCR(mTIM2) , temp_reg);
  70              		.loc 1 39 0
  71 0030 1360     		str	r3, [r2]
  40:Src/test.c    **** 	
  41:Src/test.c    **** 	//6.update event
  42:Src/test.c    **** 	temp_reg = read_reg(mTIM_EGR(mTIM2) , ~1u);
  72              		.loc 1 42 0
  73 0032 0C32     		adds	r2, r2, #12
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 3


  74 0034 1368     		ldr	r3, [r2]
  75              	.LVL10:
  43:Src/test.c    **** 	temp_reg |= 1u;
  76              		.loc 1 43 0
  77 0036 43F00103 		orr	r3, r3, #1
  78              	.LVL11:
  44:Src/test.c    **** 	write_reg(mTIM_EGR(mTIM2) , temp_reg);
  79              		.loc 1 44 0
  80 003a 1360     		str	r3, [r2]
  45:Src/test.c    **** 	
  46:Src/test.c    **** }
  81              		.loc 1 46 0
  82 003c 7047     		bx	lr
  83              	.L3:
  84 003e 00BF     		.align	2
  85              	.L2:
  86 0040 18000040 		.word	1073741848
  87              		.cfi_endproc
  88              	.LFE0:
  90              		.section	.text.input_capture_config,"ax",%progbits
  91              		.align	1
  92              		.global	input_capture_config
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu fpv4-sp-d16
  98              	input_capture_config:
  99              	.LFB1:
  47:Src/test.c    **** void input_capture_config(){
 100              		.loc 1 47 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
  48:Src/test.c    **** 	u32_t temp_reg;
  49:Src/test.c    **** 	// Select the active input:01: CC1 channel is configured as input, IC1 is mapped on TI1.
  50:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR1(mTIM2), ~3u);
 105              		.loc 1 50 0
 106 0000 0C4A     		ldr	r2, .L5
 107 0002 1368     		ldr	r3, [r2]
 108 0004 23F00303 		bic	r3, r3, #3
 109              	.LVL12:
  51:Src/test.c    **** 	//01: CC1 channel is configured as input, IC1 is mapped on TI1.
  52:Src/test.c    **** 	temp_reg |= 1u;
  53:Src/test.c    **** 	
  54:Src/test.c    **** 	// IC1F Input capture 1 filter
  55:Src/test.c    **** 	temp_reg |= (15u << 4);
 110              		.loc 1 55 0
 111 0008 43F0F103 		orr	r3, r3, #241
 112              	.LVL13:
  56:Src/test.c    **** 	write_reg(mTIM_CCMR1(mTIM2) , temp_reg);
 113              		.loc 1 56 0
 114 000c 1360     		str	r3, [r2]
  57:Src/test.c    **** 	
  58:Src/test.c    **** 	
  59:Src/test.c    **** 	// Select the edge of the active transition on the TI1 channel by writing the CC1P and
  60:Src/test.c    **** 	// CC1NP bits to 00 in the mTIM_CCER register (rising edge in this case).
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 4


  61:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM2) , ~0xFU);
 115              		.loc 1 61 0
 116 000e 0832     		adds	r2, r2, #8
 117 0010 1268     		ldr	r2, [r2]
 118              	.LVL14:
  62:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM4) , temp_reg);
  63:Src/test.c    **** 	
  64:Src/test.c    **** 	// Program the input prescaler. In our example, we wish the capture to be performed at
  65:Src/test.c    **** 	// each valid transition, so the prescaler is disabled (write IC1PS bits to 00 in the
  66:Src/test.c    **** 	// TIMx_CCMR1 register).
  67:Src/test.c    **** 	
  68:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR1(mTIM2) , ~(3u << 2));
 119              		.loc 1 68 0
 120 0012 23F00C03 		bic	r3, r3, #12
 121              	.LVL15:
  69:Src/test.c    **** 	write_reg(mTIM_CCMR1(mTIM4) , temp_reg);
 122              		.loc 1 69 0
 123 0016 0849     		ldr	r1, .L5+4
 124 0018 0B60     		str	r3, [r1]
  70:Src/test.c    **** 	
  71:Src/test.c    **** 	// Enable capture from the counter into the capture register by setting the CC1E bit in the
  72:Src/test.c    **** 	// mTIM_CCER register.
  73:Src/test.c    **** 	
  74:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM2) , ~(3u << 2));
 125              		.loc 1 74 0
 126 001a 22F00C03 		bic	r3, r2, #12
 127              	.LVL16:
  75:Src/test.c    **** 	temp_reg |=1U;
 128              		.loc 1 75 0
 129 001e 43F00103 		orr	r3, r3, #1
 130              	.LVL17:
  76:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM4) , temp_reg);
 131              		.loc 1 76 0
 132 0022 064A     		ldr	r2, .L5+8
 133 0024 1360     		str	r3, [r2]
  77:Src/test.c    **** 	
  78:Src/test.c    **** 	
  79:Src/test.c    **** 	// If needed, enable the related interrupt request by setting the CC1IE bit in the
  80:Src/test.c    **** 	// TIMx_DIER register, and/or the DMA request by setting the CC1DE bit in the
  81:Src/test.c    **** 	// TIMx_DIER register
  82:Src/test.c    **** 	
  83:Src/test.c    **** 	// An interrupt is generated depending on the CC1IE bit.
  84:Src/test.c    **** 	temp_reg = read_reg(mTIM_DIER(mTIM2) , ~(1u << 1));
 134              		.loc 1 84 0
 135 0026 064B     		ldr	r3, .L5+12
 136              	.LVL18:
 137 0028 1B68     		ldr	r3, [r3]
 138              	.LVL19:
  85:Src/test.c    **** 	temp_reg |=(1U<<1);
 139              		.loc 1 85 0
 140 002a 43F00203 		orr	r3, r3, #2
 141              	.LVL20:
  86:Src/test.c    **** 	write_reg(mTIM_DIER(mTIM4) , temp_reg);
 142              		.loc 1 86 0
 143 002e 143A     		subs	r2, r2, #20
 144 0030 1360     		str	r3, [r2]
  87:Src/test.c    **** 
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 5


  88:Src/test.c    **** }
 145              		.loc 1 88 0
 146 0032 7047     		bx	lr
 147              	.L6:
 148              		.align	2
 149              	.L5:
 150 0034 18000040 		.word	1073741848
 151 0038 18080040 		.word	1073743896
 152 003c 20080040 		.word	1073743904
 153 0040 0C000040 		.word	1073741836
 154              		.cfi_endproc
 155              	.LFE1:
 157              		.section	.text.tim4_pwm_config,"ax",%progbits
 158              		.align	1
 159              		.global	tim4_pwm_config
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	tim4_pwm_config:
 166              	.LFB2:
  89:Src/test.c    **** 
  90:Src/test.c    **** //confgig tim 4 with output compare on pd12 13 14 15 16 
  91:Src/test.c    **** void tim4_pwm_config(){
 167              		.loc 1 91 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 172 0000 30B4     		push	{r4, r5}
 173              	.LCFI0:
 174              		.cfi_def_cfa_offset 8
 175              		.cfi_offset 4, -8
 176              		.cfi_offset 5, -4
  92:Src/test.c    **** // 1. Configure the output pin:
  93:Src/test.c    **** // a) Select the output mode by writing CCS bits in CCMRx register.
  94:Src/test.c    **** 	u32_t temp_reg;
  95:Src/test.c    **** 	// 1.Configure channel 4 to detect rising edges on the TI2 input
  96:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR2(mTIM4) , ~( 3u << 8));
 177              		.loc 1 96 0
 178 0002 1348     		ldr	r0, .L9
 179 0004 0368     		ldr	r3, [r0]
 180              	.LVL21:
  97:Src/test.c    **** 	write_reg(mTIM_CCMR2(mTIM4) , temp_reg);
  98:Src/test.c    **** 	
  99:Src/test.c    **** // b) Select the polarity by writing the CCxP bit in CCER register.
 100:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM4) , ~(0xFU <<12));
 181              		.loc 1 100 0
 182 0006 1349     		ldr	r1, .L9+4
 183 0008 0A68     		ldr	r2, [r1]
 184 000a 22F47042 		bic	r2, r2, #61440
 185              	.LVL22:
 101:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM4) , temp_reg);
 102:Src/test.c    **** 
 103:Src/test.c    **** 
 104:Src/test.c    **** // 2. Select the PWM mode (PWM1 or PWM2) by writing OCxM bits in CCMRx register.
 105:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR2(mTIM4) , ~(7U << 12));
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 6


 186              		.loc 1 105 0
 187 000e 23F4E643 		bic	r3, r3, #29440
 188              	.LVL23:
 106:Src/test.c    **** 	temp_reg |= (6u <<12);
 189              		.loc 1 106 0
 190 0012 43F4C043 		orr	r3, r3, #24576
 191              	.LVL24:
 107:Src/test.c    **** 	write_reg(mTIM_CCMR2(mTIM4) , temp_reg);
 108:Src/test.c    **** 	
 109:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR2(mTIM4) , ~(7U << 4));
 192              		.loc 1 109 0
 193 0016 23F07003 		bic	r3, r3, #112
 194              	.LVL25:
 110:Src/test.c    **** 	temp_reg |= (6u <<4);
 111:Src/test.c    **** 	write_reg(mTIM_CCMR2(mTIM4) , temp_reg);
 112:Src/test.c    **** 	
 113:Src/test.c    **** 
 114:Src/test.c    **** // 3. Program the period and the duty cycle respectively in ARR and CCRx registers.
 115:Src/test.c    **** 	
 116:Src/test.c    **** 	temp_reg = 400u;
 117:Src/test.c    **** 	write_reg(mTIM_ARR(mTIM4) , temp_reg);
 195              		.loc 1 117 0
 196 001a 0F4C     		ldr	r4, .L9+8
 197 001c 4FF4C875 		mov	r5, #400
 198 0020 2560     		str	r5, [r4]
 199              	.LVL26:
 118:Src/test.c    **** 	
 119:Src/test.c    **** 	temp_reg = 200;
 120:Src/test.c    **** 	write_reg(mTIM_CCR1(mTIM4) , temp_reg);
 200              		.loc 1 120 0
 201 0022 0834     		adds	r4, r4, #8
 202 0024 C825     		movs	r5, #200
 203 0026 2560     		str	r5, [r4]
 204              	.LVL27:
 121:Src/test.c    **** 	
 122:Src/test.c    **** // 4. Set the preload bit in CCMRx register and the ARPE bit in the CR1 register.
 123:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR2(mTIM4) , ~(1u << 11));
 124:Src/test.c    **** 	temp_reg |= (1u << 11);
 125:Src/test.c    **** 	write_reg(mTIM_CCMR2(mTIM4) , temp_reg);
 126:Src/test.c    **** 	
 127:Src/test.c    **** 	//channel 3
 128:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCMR2(mTIM4) , ~(1u << 3));
 129:Src/test.c    **** 	temp_reg |= (1u << 3);
 205              		.loc 1 129 0
 206 0028 43F40663 		orr	r3, r3, #2144
 207              	.LVL28:
 208 002c 43F00803 		orr	r3, r3, #8
 209              	.LVL29:
 130:Src/test.c    **** 	write_reg(mTIM_CCMR2(mTIM4) , temp_reg);
 210              		.loc 1 130 0
 211 0030 0360     		str	r3, [r0]
 131:Src/test.c    **** 	
 132:Src/test.c    **** 	temp_reg = read_reg(mTIM_CR1(mTIM4) , ~(1u<<7));
 212              		.loc 1 132 0
 213 0032 1C38     		subs	r0, r0, #28
 214 0034 0368     		ldr	r3, [r0]
 215              	.LVL30:
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 7


 133:Src/test.c    **** 	temp_reg |= (1u<<7);
 216              		.loc 1 133 0
 217 0036 43F08003 		orr	r3, r3, #128
 218              	.LVL31:
 134:Src/test.c    **** 	write_reg(mTIM_CR1(mTIM4) , temp_reg);
 219              		.loc 1 134 0
 220 003a 0360     		str	r3, [r0]
 135:Src/test.c    **** 	
 136:Src/test.c    **** 	temp_reg = read_reg(mTIM_EGR(mTIM4) , ~1u);
 221              		.loc 1 136 0
 222 003c 1430     		adds	r0, r0, #20
 223 003e 0368     		ldr	r3, [r0]
 224              	.LVL32:
 137:Src/test.c    **** 	temp_reg |= 1u;
 225              		.loc 1 137 0
 226 0040 43F00103 		orr	r3, r3, #1
 227              	.LVL33:
 138:Src/test.c    **** 	write_reg(mTIM_EGR(mTIM4) , temp_reg);	
 228              		.loc 1 138 0
 229 0044 0360     		str	r3, [r0]
 230              	.LVL34:
 139:Src/test.c    **** 	
 140:Src/test.c    **** 	
 141:Src/test.c    **** 
 142:Src/test.c    **** // 5. Select the counting mode:
 143:Src/test.c    **** // a) PWM edge-aligned mode: the counter must be configured up-counting or down-
 144:Src/test.c    **** // counting.
 145:Src/test.c    **** 
 146:Src/test.c    **** // using edge-aligned mode by default
 147:Src/test.c    **** 	
 148:Src/test.c    **** // b) PWM center aligned mode: the counter mode must be center aligned counting
 149:Src/test.c    **** // mode (CMS bits different from '00').
 150:Src/test.c    **** 
 151:Src/test.c    **** 		
 152:Src/test.c    **** 
 153:Src/test.c    **** // 6. Enable the capture compare.
 154:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM4) , ~(1u <<12));
 155:Src/test.c    **** 	temp_reg |= (1u <<12);
 156:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM4) , temp_reg);
 157:Src/test.c    **** 	
 158:Src/test.c    **** 	temp_reg = read_reg(mTIM_CCER(mTIM4) , ~(1u <<8));
 159:Src/test.c    **** 	temp_reg |= (1u <<8);
 231              		.loc 1 159 0
 232 0046 42F48852 		orr	r2, r2, #4352
 233              	.LVL35:
 160:Src/test.c    **** 	write_reg(mTIM_CCER(mTIM4) , temp_reg);
 234              		.loc 1 160 0
 235 004a 0A60     		str	r2, [r1]
 161:Src/test.c    **** 	
 162:Src/test.c    **** // 7. Enable the counter.
 163:Src/test.c    **** }
 236              		.loc 1 163 0
 237 004c 30BC     		pop	{r4, r5}
 238              	.LCFI1:
 239              		.cfi_restore 5
 240              		.cfi_restore 4
 241              		.cfi_def_cfa_offset 0
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 8


 242 004e 7047     		bx	lr
 243              	.L10:
 244              		.align	2
 245              	.L9:
 246 0050 1C080040 		.word	1073743900
 247 0054 20080040 		.word	1073743904
 248 0058 2C080040 		.word	1073743916
 249              		.cfi_endproc
 250              	.LFE2:
 252              		.text
 253              	.Letext0:
 254              		.file 2 "E:/Users/VuHaiLong/Documents/stm/mylib/mInc/mtype.h"
 255              		.file 3 "Inc/stm32f4xx_it.h"
ARM GAS  E:\msys32\tmp\cczltjzW.s 			page 9


DEFINED SYMBOLS
                            *ABS*:00000000 test.c
E:\msys32\tmp\cczltjzW.s:18     .text.config_ext_clk1:00000000 $t
E:\msys32\tmp\cczltjzW.s:25     .text.config_ext_clk1:00000000 config_ext_clk1
E:\msys32\tmp\cczltjzW.s:86     .text.config_ext_clk1:00000040 $d
E:\msys32\tmp\cczltjzW.s:91     .text.input_capture_config:00000000 $t
E:\msys32\tmp\cczltjzW.s:98     .text.input_capture_config:00000000 input_capture_config
E:\msys32\tmp\cczltjzW.s:150    .text.input_capture_config:00000034 $d
E:\msys32\tmp\cczltjzW.s:158    .text.tim4_pwm_config:00000000 $t
E:\msys32\tmp\cczltjzW.s:165    .text.tim4_pwm_config:00000000 tim4_pwm_config
E:\msys32\tmp\cczltjzW.s:246    .text.tim4_pwm_config:00000050 $d

NO UNDEFINED SYMBOLS
